<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by youtingkun]]></title><description><![CDATA[Pellentesque odio nisi, euismod in, pharetra a, ultricies in, diam. Sed arcu.]]></description><link>https://blog.youtingkun.com</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 11 Jul 2022 06:57:33 GMT</lastBuildDate><item><title><![CDATA[前端压缩图片]]></title><link>https://blog.youtingkun.com/posts/compressed-image</link><guid isPermaLink="false">https://blog.youtingkun.com/posts/compressed-image</guid><pubDate>Sat, 27 Jun 2020 18:57:54 GMT</pubDate><content:encoded>&lt;p&gt;前端通过 canvas 来实现上传时的图片压缩&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;js&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;async function imgCompress(imgFile, quality, maxSize) {
  return new Promise(async (resolve, reject) =&amp;gt; {
    if (imgFile.size &amp;lt; maxSize * 1024 * 1024) {
      resolve(imgFile);
      return;
    }
    console.log(&amp;quot;压缩前的大小：&amp;quot;, imgFile.size);
    const type = imgFile.type;
    const dataURL = await file2DataURL(imgFile);
    const img = await dataURL2Image(dataURL);
    const compressedDataURL = await canvasCompress(img, quality, type);
    const compressedResult = await dataURL2Blob(compressedDataURL, type);
    compressedResult.fileName = imgFile.name;
    console.log(&amp;quot;压缩后的大小：&amp;quot;, compressedResult.size);
    resolve(compressedResult);
  });
}

function file2DataURL(file) {
  return new Promise((resolve, reject) =&amp;gt; {
    const reader = new FileReader();
    reader.onload = function() {
      const dataURL = this.result;
      resolve(dataURL);
    };
    reader.readAsDataURL(file);
  });
}

function dataURL2Image(dataURL, callback) {
  return new Promise((resolve, reject) =&amp;gt; {
    const img = new Image();
    img.onload = () =&amp;gt; {
      resolve(img);
    };
    img.src = dataURL;
  });
}

function canvasCompress(img, quality, type) {
  return new Promise((resolve, reject) =&amp;gt; {
    const canvas = document.createElement(&amp;quot;canvas&amp;quot;);
    const { width, height } = img;
    canvas.width = width;
    canvas.height = height;
    const context = canvas.getContext(&amp;quot;2d&amp;quot;);
    context.drawImage(img, 0, 0, width, height);
    const compressedDataURL = canvas.toDataURL(type, quality);
    resolve(compressedDataURL);
  });
}

function dataURL2Blob(dataURL, type) {
  return new Promise((resolve, reject) =&amp;gt; {
    const text = window.atob(dataURL.split(&amp;quot;,&amp;quot;)[1]);
    const buffer = new ArrayBuffer(text.length);
    const ubuffer = new Uint8Array(buffer);
    for (let i = 0; i &amp;lt; text.length; i++) {
      ubuffer[i] = text.charCodeAt(i);
    }
    const blob = new window.Blob([buffer], { type });
    resolve(blob);
  });
}

export default imgCompress;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;</content:encoded></item><item><title><![CDATA[在表格的自定义列里面实现自定义验证]]></title><link>https://blog.youtingkun.com/posts/Custom-authentication</link><guid isPermaLink="false">https://blog.youtingkun.com/posts/Custom-authentication</guid><pubDate>Fri, 21 Jun 2019 20:14:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;实现方法&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95&quot; aria-label=&quot;实现方法 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;实现方法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;简单来说就是先在 el-table 外面套一个 el-form。&lt;/li&gt;
&lt;li&gt;然后再在表格的模板 template 里面包含 el-form-item。&lt;/li&gt;
&lt;li&gt;在绑定 prop 的时候要注意绑定的是每一个 item 的 prop&lt;/li&gt;
&lt;/ul&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;lt;el-form ref=&amp;quot;ruleForm&amp;quot; :model=&amp;quot;ruleForm&amp;quot; :rules=&amp;quot;rules&amp;quot; :inline-message=&amp;quot;true&amp;quot;&amp;gt;
  &amp;lt;el-table :data=&amp;quot;ruleForm.purchaseList&amp;quot;&amp;gt;
    &amp;lt;el-table-column label=&amp;quot;数量&amp;quot; prop=&amp;quot;goodsNumber&amp;quot;&amp;gt;
      &amp;lt;template slot-scope=&amp;quot;scope&amp;quot;&amp;gt;
        &amp;lt;el-form-item :prop=&amp;quot;`purchaseList.${scope.$index}.goodsNumber`&amp;quot; :rules=&amp;quot;rules.test&amp;quot;&amp;gt;
          &amp;lt;el-input
            size=&amp;quot;mini&amp;quot;
            type=&amp;quot;number&amp;quot;
            v-model=&amp;quot;scope.row.goodsNumber&amp;quot;
            placeholder=&amp;quot;请输入数量&amp;quot;
          &amp;gt;&amp;lt;/el-input&amp;gt;
        &amp;lt;/el-form-item&amp;gt;
      &amp;lt;/template&amp;gt;
    &amp;lt;/el-table-column&amp;gt;
    &amp;lt;/el-table-column&amp;gt;
  &amp;lt;/el-table&amp;gt;
&amp;lt;/el-form&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;!--more--&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;  ruleForm: {
    purchaseList: []
  },
  rules: {
    test: [{ required: true, message: &amp;quot;请输入&amp;quot;, trigger: &amp;quot;change&amp;quot; }]
  }&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;  submitStep() {
    this.$refs.ruleForm.validate(valid =&amp;gt; {
      if (valid) {
        alert(&amp;quot;submit!&amp;quot;);
      } else {
        console.log(&amp;quot;error submit!!&amp;quot;);
        return false;
      }
  })&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;</content:encoded></item><item><title><![CDATA[vue实例生命周期、vue父子组件生命周期、router生命周期、vuex生命周期的区别和联系]]></title><link>https://blog.youtingkun.com/posts/vue-life-cycle</link><guid isPermaLink="false">https://blog.youtingkun.com/posts/vue-life-cycle</guid><pubDate>Wed, 15 May 2019 16:38:15 GMT</pubDate><content:encoded>&lt;p&gt;销毁和创建组件的生命周期：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;1.通过v-if来控制组件的销毁和重建&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;刷新当前页面：&lt;/p&gt;
&lt;p&gt;1.直接刷新整个页面&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;location.reload()

this.$router.go(0)

//这两种都可以刷新当前页面，缺点就相当于按ctrl+F5强制刷新页面，会出现一个瞬间的空白页面。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;2.新建一个空白页面 supplierAllBack.vue，点击确定的时候先跳转到这个空白页，然后再跳转回来。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;3.使用 provide/inject 组合方式。&lt;/p&gt;
&lt;p&gt;在 App.vue 中&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
    &amp;lt;router-view v-if=&amp;quot;isRouterAlive&amp;quot;&amp;gt;&amp;lt;/router-view&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  name: &amp;#39;App&amp;#39;,
  provide () {
    return {
      reload: this.reload
    }
  },
  data () {
    return {
      isRouterAlive: true
    }
  },
  methods: {
    reload () {
      this.isRouterAlive = false
      this.$nextTick(function () {
        this.isRouterAlive = true
      })
    }
  }
}
&amp;lt;/script&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;在页面中：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;inject:[&amp;quot;reload&amp;quot;]

this.reload()&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h1 id=&quot;vue-实例生命周期&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue-%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&quot; aria-label=&quot;vue 实例生命周期 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vue 实例生命周期&lt;/h1&gt;
&lt;p&gt;beforeCreate:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;    data中数据生成
    computed中数据生成
    watch中数据生成
    methods中数据生成&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;created:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;此时就可以访问到data、computed、watch、methods中的方法和数据&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;beforeMount:&lt;/p&gt;
&lt;p&gt;mounted:&lt;/p&gt;
&lt;p&gt;beforeUpdate:&lt;/p&gt;
&lt;p&gt;updated:&lt;/p&gt;
&lt;p&gt;beforeDestroy:&lt;/p&gt;
&lt;p&gt;destoryed:&lt;/p&gt;
&lt;h1 id=&quot;父子组件生命周期&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&quot; aria-label=&quot;父子组件生命周期 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;父子组件生命周期&lt;/h1&gt;
&lt;p&gt;父组件：&lt;/p&gt;
&lt;p&gt;beforeCreate:&lt;/p&gt;
&lt;p&gt;created:&lt;/p&gt;
&lt;p&gt;beforeMount:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;子组件：

    beforeCreate:

    created:

    beforeMount:

    mounted:&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;mounted:&lt;/p&gt;
&lt;p&gt;beforeUpdate:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;子组件：

    beforeUpdate:

    updated:&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;updated:&lt;/p&gt;
&lt;p&gt;beforeDestroy:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;子组件：

    beforeDestroy:

    destoryed:&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;destoryed:&lt;/p&gt;
&lt;h1 id=&quot;vue-router-生命周期&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue-router-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&quot; aria-label=&quot;vue router 生命周期 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vue-router 生命周期&lt;/h1&gt;
&lt;h3 id=&quot;一全局路由&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%B8%80%E5%85%A8%E5%B1%80%E8%B7%AF%E7%94%B1&quot; aria-label=&quot;一全局路由 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;一、全局路由：&lt;/h3&gt;
&lt;p&gt;beforeEach:&lt;/p&gt;
&lt;p&gt;beforeResolve:&lt;/p&gt;
&lt;p&gt;afterEach:&lt;/p&gt;
&lt;h3 id=&quot;二路由独享守卫&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BA%8C%E8%B7%AF%E7%94%B1%E7%8B%AC%E4%BA%AB%E5%AE%88%E5%8D%AB&quot; aria-label=&quot;二路由独享守卫 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;二、路由独享守卫&lt;/h3&gt;
&lt;p&gt;beforeEnter:&lt;/p&gt;
&lt;h3 id=&quot;三组件内&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%B8%89%E7%BB%84%E4%BB%B6%E5%86%85&quot; aria-label=&quot;三组件内 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;三、组件内&lt;/h3&gt;
&lt;p&gt;beforeRouterEnter:&lt;/p&gt;
&lt;p&gt;beforeRouteUpdate:&lt;/p&gt;
&lt;p&gt;beforeRouteLeave:&lt;/p&gt;
&lt;h3 id=&quot;四完整的导航解析流程&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%9B%9B%E5%AE%8C%E6%95%B4%E7%9A%84%E5%AF%BC%E8%88%AA%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B&quot; aria-label=&quot;四完整的导航解析流程 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;四、完整的导航解析流程&lt;/h3&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;- 导航被触发。
- 在失活的组件里调用离开守卫。
- 调用全局的 beforeEach 守卫。
- 在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。
- 在路由配置里调用 beforeEnter。
- 解析异步路由组件。
- 在被激活的组件里调用 beforeRouteEnter。
- 调用全局的 beforeResolve 守卫 (2.5+)。
- 导航被确认。
- 调用全局的 afterEach 钩子。
- 触发 DOM 更新。
- 用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h1 id=&quot;vuex-生命周期&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vuex-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&quot; aria-label=&quot;vuex 生命周期 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vuex 生命周期&lt;/h1&gt;
&lt;p&gt;vuex 中的变量和方法本质上是属于全局的变量和方法。所以在页面刷新时才会消失，其它时间都是在更改。&lt;/p&gt;
&lt;h1 id=&quot;vue-实例与-vue-router-的生命周期&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue-%E5%AE%9E%E4%BE%8B%E4%B8%8E-vue-router-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&quot; aria-label=&quot;vue 实例与 vue router 的生命周期 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vue 实例与 vue-router 的生命周期&lt;/h1&gt;
&lt;h3 id=&quot;进入&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E8%BF%9B%E5%85%A5&quot; aria-label=&quot;进入 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;进入&lt;/h3&gt;
&lt;p&gt;路由：&lt;/p&gt;
&lt;p&gt;beforeEach:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;组件：

    beforeRouteUpdate:

路由配置：

    beforeEnter：

组件：

    beforeRouterEnter:&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;beforeResolve:&lt;/p&gt;
&lt;p&gt;afterEach:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;组件：

    beforeCreate:

    created:

    beforeMount:

    mounted:

    beforeUpdate:

    updated:&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;离开&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E7%A6%BB%E5%BC%80&quot; aria-label=&quot;离开 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;离开&lt;/h3&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt; 组件：

 beforeRouteLeave:&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;路由：&lt;/p&gt;
&lt;p&gt;beforeEach:&lt;/p&gt;
&lt;p&gt;afterEach:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;组件：

    beforeDestroy:

    destoryed:&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h1 id=&quot;vue-实例与-vuex-的生命周期&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue-%E5%AE%9E%E4%BE%8B%E4%B8%8E-vuex-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&quot; aria-label=&quot;vue 实例与 vuex 的生命周期 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vue 实例与 vuex 的生命周期&lt;/h1&gt;
&lt;p&gt;因为 vuex 中的数据声明在 computed 中，方法声明中 methods 中，所以 vuex 中数据和方法的使用，跟随着 vue 实例中 computed 和 methods 的生命周期。&lt;/p&gt;
&lt;h3 id=&quot;数据和方法初始化&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%95%B0%E6%8D%AE%E5%92%8C%E6%96%B9%E6%B3%95%E5%88%9D%E5%A7%8B%E5%8C%96&quot; aria-label=&quot;数据和方法初始化 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;数据和方法初始化&lt;/h3&gt;
&lt;p&gt;beforeCreate:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;computed中数据生成：

    state和getter中的数据

methods中方法生成：

    action和mutaion中的方法&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;created:&lt;/p&gt;
&lt;p&gt;beforeMount:&lt;/p&gt;
&lt;p&gt;mounted:&lt;/p&gt;
&lt;p&gt;beforeUpdate:&lt;/p&gt;
&lt;p&gt;updated:&lt;/p&gt;
&lt;p&gt;beforeDestroy:&lt;/p&gt;
&lt;p&gt;destoryed:&lt;/p&gt;
&lt;h3 id=&quot;数据更新&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0&quot; aria-label=&quot;数据更新 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;数据更新：&lt;/h3&gt;
&lt;p&gt;vuex：&lt;/p&gt;
&lt;p&gt;actions:&lt;/p&gt;
&lt;p&gt;mutations:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;组件：

    beforeUpdate:

    updated:&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;</content:encoded></item><item><title><![CDATA[vue插槽与父子组件传值]]></title><link>https://blog.youtingkun.com/posts/Vue-slot</link><guid isPermaLink="false">https://blog.youtingkun.com/posts/Vue-slot</guid><pubDate>Wed, 06 Mar 2019 20:29:57 GMT</pubDate><content:encoded>&lt;h1 id=&quot;1父子组件之间的传值&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E5%80%BC&quot; aria-label=&quot;1父子组件之间的传值 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.父子组件之间的传值&lt;/h1&gt;
&lt;h3 id=&quot;子组件传值到父组件&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E5%88%B0%E7%88%B6%E7%BB%84%E4%BB%B6&quot; aria-label=&quot;子组件传值到父组件 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;子组件传值到父组件&lt;/h3&gt;
&lt;p&gt;子组件在向父组件传值的时候，主要是通过子组件通过$emit()函数派发出事件，然后再父组件中通过事件监听:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;//比如定义了一个子组件&amp;lt;i-button&amp;gt;
&amp;lt;template&amp;gt;
  &amp;lt;button @click=&amp;quot;handleClick&amp;quot;&amp;gt;
    &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
  export default {
    methods: {
      handleClick () {
        this.$emit(&amp;#39;on-click&amp;#39;, {a:123});
      }
    }
  }
&amp;lt;/script&amp;gt;
//这里的on-click是事件的名字，a是要传递的参数

//然后在父组件中监听
&amp;lt;i-button @on-click=&amp;quot;sayhi&amp;quot;&amp;gt;sayhi&amp;lt;/i-button&amp;gt;

&amp;lt;script&amp;gt;
  export default {
        methods:{
         sayhi(b){
          console.log(b);  // Vue.js
        }
      }
  }
&amp;lt;/script&amp;gt;
//注意这里的b只是用来接收子组件传递过来的对象，输入的是{a:123},并不会输出123,如果输出123可以写成b.a&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;!--more--&gt;
&lt;h3 id=&quot;父组件向子组件传值&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E7%88%B6%E7%BB%84%E4%BB%B6%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC&quot; aria-label=&quot;父组件向子组件传值 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;父组件向子组件传值&lt;/h3&gt;
&lt;p&gt;父组件向子组件传值，主要是通过子组件的 prop 属性来接收父组件的数据:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;//比如在父组件中声明传值
&amp;lt;i-button :title=titleData&amp;gt;&amp;lt;/i-button&amp;gt;

data(){
    return{
      titleData:&amp;#39;hello props&amp;#39;
    }
},

//在子组件&amp;lt;i-button&amp;gt;中接收
&amp;lt;h3&amp;gt;{{title}}&amp;lt;/h3&amp;gt;

props: [&amp;quot;title&amp;quot;],

//这里就会显示为&amp;lt;h3&amp;gt;helo props&amp;lt;/h3&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;或者使用 props 中声明的为对象的方式:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;//在父组件中声明传值
&amp;lt;i-button :title=titleData&amp;gt;&amp;lt;/i-button&amp;gt;

data(){
    return{
      titleData:&amp;#39;hello props&amp;#39;
    }
},

//在子组件&amp;lt;i-button&amp;gt;中接收
&amp;lt;h3&amp;gt;{{title}}&amp;lt;/h3&amp;gt;

props: {
    title:{

    },
},

//这里也会显示为&amp;lt;h3&amp;gt;helo props&amp;lt;/h3&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h1 id=&quot;2插槽传值插槽的定义是子组件显示什么内容由父组件决定&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2%E6%8F%92%E6%A7%BD%E4%BC%A0%E5%80%BC%E6%8F%92%E6%A7%BD%E7%9A%84%E5%AE%9A%E4%B9%89%E6%98%AF%E5%AD%90%E7%BB%84%E4%BB%B6%E6%98%BE%E7%A4%BA%E4%BB%80%E4%B9%88%E5%86%85%E5%AE%B9%E7%94%B1%E7%88%B6%E7%BB%84%E4%BB%B6%E5%86%B3%E5%AE%9A&quot; aria-label=&quot;2插槽传值插槽的定义是子组件显示什么内容由父组件决定 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.插槽传值，插槽的定义是子组件显示什么内容由父组件决定&lt;/h1&gt;
&lt;h3 id=&quot;插槽传值的基本用法&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%8F%92%E6%A7%BD%E4%BC%A0%E5%80%BC%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95&quot; aria-label=&quot;插槽传值的基本用法 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;插槽传值的基本用法：&lt;/h3&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;比如定义了一个子组件&amp;lt;i-button&amp;gt;
&amp;lt;template&amp;gt;
  &amp;lt;button&amp;gt;
    &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;

在父组件中使用
&amp;lt;i-button&amp;gt;按钮1&amp;lt;i-button&amp;gt;

这里就会显示成为
&amp;lt;button&amp;gt;按钮1&amp;lt;button&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;给插槽起个名字&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E7%BB%99%E6%8F%92%E6%A7%BD%E8%B5%B7%E4%B8%AA%E5%90%8D%E5%AD%97&quot; aria-label=&quot;给插槽起个名字 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;给插槽起个名字：&lt;/h3&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;//子组件
&amp;lt;template&amp;gt;
  &amp;lt;button&amp;gt;
    &amp;lt;slot name=&amp;quot;icon&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
    &amp;lt;slot&amp;gt;solot里面默认的内容&amp;lt;/slot&amp;gt;
  &amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;

//父组件
&amp;lt;i-button slot=&amp;quot;icon&amp;quot;&amp;gt;按钮1&amp;lt;/i-button&amp;gt;
&amp;lt;i-button &amp;gt;按钮2&amp;lt;/i-button&amp;gt;
&amp;lt;i-button &amp;gt;&amp;lt;/i-button&amp;gt;

//这里解释一下
1.如果在父组件中使用的时候给slot赋值了名字，那么这里子组件就会显示&amp;lt;button&amp;gt;按钮1&amp;lt;/button&amp;gt;
2.如果在父组件中没有赋值名字，但给了子组件要显示的内容，那么这里子组件就会显示&amp;lt;button&amp;gt;按钮2&amp;lt;/button&amp;gt;
3.如果在父组件中没有赋值名字，也没有给了子组件要显示的内容，那么这里子组件就会显示默认的内容&amp;lt;button&amp;gt;solot里面默认的内容&amp;lt;/button&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;作用域插槽&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD&quot; aria-label=&quot;作用域插槽 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;作用域插槽：&lt;/h3&gt;
&lt;p&gt;如果我们在父组件中这样写：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;lt;i-button &amp;gt;{{titleData}}&amp;lt;/i-button&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;这里的 titleData 是父组件中的数据，这样写是不能够正常工作的，因为 titleData 是父组件的数据，子组件并不能获取到，这个时候就需要用到我们的作用域插槽了。&lt;/p&gt;
&lt;p&gt;父组件来访问子组件的数据：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;//父组件
&amp;lt;i-button &amp;gt;
  &amp;lt;template  slot-scope=&amp;quot;parentName&amp;quot;&amp;gt;{{parentName.childrenName}}&amp;lt;/template&amp;gt;
&amp;lt;/i-button&amp;gt;

//子组件&amp;lt;i-button&amp;gt;
&amp;lt;template&amp;gt;
  &amp;lt;button&amp;gt;
    &amp;lt;slot :childrenName=&amp;quot;childrenData&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;

data(){
    return{
      childrenData:&amp;quot;hello slot-scope&amp;quot;
    }
},

//这里父组件就会拿到子组件childrenData的值，显示为&amp;lt;button&amp;gt;hello slot-scope&amp;lt;/button&amp;gt;
//解释下，parentName可以理解是父组件与子组件之间的标识，childrenName才是真正绑定的数据&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;如果我们从父组件中传值过去到子组件中显示，就需要利用父子组件之间传值的方法了：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;//父组件
&amp;lt;i-button :parenDataName=&amp;quot;parentData&amp;quot;&amp;gt;
  &amp;lt;template  slot-scope=&amp;quot;parentName&amp;quot;&amp;gt;{{parentName.childrenName}}&amp;lt;/template&amp;gt;
&amp;lt;/i-button&amp;gt;

data(){
    return{
      parentData:&amp;quot;hello slot-scope parent&amp;quot;
    }
  },

//子组件&amp;lt;i-button&amp;gt;
&amp;lt;template&amp;gt;
  &amp;lt;button&amp;gt;
    &amp;lt;slot :childrenName=&amp;quot;childrenData&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;
    &amp;lt;slot :childrenName=&amp;quot;parentDataName&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;

props: {
    parentDataName:{}
},
data(){
    return{
      childrenData:&amp;quot;hello slot-scope children&amp;quot;
    }
},

//这里一个是直接访问子组件中的值，一个是先自己传递过去之后再访问子组件中的值&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h1 id=&quot;区别&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%8C%BA%E5%88%AB&quot; aria-label=&quot;区别 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;区别&lt;/h1&gt;
&lt;p&gt;现在我们已经知道了插槽与父子组件之间传值的基本用法，那么他们之间有什么区别呢？我概况为以下几点&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;1.插槽之间的传值，插槽要显示的内容是写在父组件中的，也就是父组件中的数据是写在自己的组件里。
2.而父子组件之间的传值，是在当前组件拿到了数据之后，然后才在当自己的组件中显示。
3.如果说他们之间有什么联系的话，插槽传值，其实类似于父组件向子组件传值。而插槽默认值的写法又像是子组件向父组件传值，只是如果父组件有传值过来，会被覆盖掉了而已。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;</content:encoded></item><item><title><![CDATA[let和var不得不说的关系]]></title><link>https://blog.youtingkun.com/posts/let-var</link><guid isPermaLink="false">https://blog.youtingkun.com/posts/let-var</guid><pubDate>Sat, 08 Dec 2018 19:01:56 GMT</pubDate><content:encoded>&lt;h1 id=&quot;let&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#let&quot; aria-label=&quot;let permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;let：&lt;/h1&gt;
&lt;p&gt;声明的 let 变量只作于于代码块内部，外部访问会报变量没有被定义的错误。&lt;/p&gt;
&lt;p&gt;而 var 变量在没有声明时访问，只会返回 undefined，并不会报错。&lt;/p&gt;
&lt;p&gt;什么叫代码块内部昵？简单来说就是被{}所包裹的内容。&lt;/p&gt;
&lt;p&gt;当在（）中声明的 let 变量，也只能在它后面的{}中访问。即{}可以看做 let 作用域的子作用域。&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;var a = 1;
{
    var b = 2;
    let c = 3;
}
或
for (var b1 = 1 ; b1&amp;lt;=3;b1++) {
    console.log(b1)
}
for (let c1 = 1; c1 &amp;lt;= 3; c1++) {
    console.log(c1)
}
//这里的a、b、b1都能在外部访问。而c、c1只能在内部访问。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;!--more--&gt;
&lt;p&gt;变量提升：当声明的 var 变量，变量会自动提升为全局变量。不管是在函数外部还是在函数内部，只要在定义之后都可以访问。&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;for (var b1 = 1 ; b1&amp;lt;=3;b1++) {
    console.log(b1);
    console.log(b2);
    for (var b2 =1; b2 &amp;lt;=3; b2++) {
        console.log(b1);
        console.log(b2)
    }
    console.log(&amp;quot;------------------------------------&amp;quot;)
}
console.log(b1)
console.log(b2)
//这里都能访问b1,b2。只是在内部第一层第一次访问b2时会返回undifined。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;对应的用 let 声明：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;for (let c1 = 1; c1 &amp;lt;= 3; c1++) {
    console.log(c1)
    for (let c2=1; c2&amp;lt;=3; c2++) {
        console.log(c1)
        console.log(c2)
    }
    console.log(&amp;quot;------------------------------------&amp;quot;)
}
//这里内部第二层可以访问到c1,也就是说这里的作用域包括了它的子作用域。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;var 变量名相同时：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同层：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;var a =1
var a =2
//a=2，即他们共享内存地址。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;不同层：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;for (var b1 = 1 ; b1&amp;lt;=3;b1++) {
    console.log(b1);
    console.log(b1);
    for (var b1 =1; b1 &amp;lt;=3; b1++) {
        console.log(b1);
        console.log(b1)
    }
    console.log(&amp;quot;------------------------------------&amp;quot;)
}
console.log(b1)
console.log(b1)
//第一层b1和第二层b2共享内存地址。
//这里外部循环只会执行一次，即内部循环跳出时，外部的第二次循环b2的值已经是4。
//由于for循环特性，依然会执行b++，所以最后输出的b1的值为5&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;let 变量名相同时：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同层：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;let a =1
let a =2
console.log(a)
//会报错，提示&amp;#39;a&amp;#39;has already been declared&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;不同层：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;for (let c1 = 1; c1 &amp;lt;= 3; c1++) {
    console.log(c1)
    for (let c1=1; c1&amp;lt;=3; c1++) {
        console.log(c1)
        console.log(c1)
    }
    console.log(&amp;quot;------------------------------------&amp;quot;)
}
//
//第一层c1和第二层c1有单独的内存地址。
//这里第一层和第二层的c1名字虽然是一样的，但是在自己的块内只访问自己的变量。
//即第一层只访问第一层的变量，第二层访问第二层的变量。相互之间不影响。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;**var 变量于 let 变量同名时： **&lt;/p&gt;
&lt;p&gt;同层：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;var b =1
let b =7
console.log(b)
//会报错，&amp;#39;b&amp;#39; has already been declared

let b =1
var b=7
//会报错，&amp;#39;b&amp;#39; has already been declared

for (let b1 = 1; b1 &amp;lt;= 3; b1++) {
    var b1 = 7;
    console.log(b1)
}
//这样写也会报错

for (var b1 = 1; b1 &amp;lt;= 3; b1++) {
    let b1 = 7;
    console.log(b1)
}
//按理来说，这样也应该叫同层，会报错。但是不会，会正常的输出三个7。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;不同层：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;var b =1
for (let b=1;b&amp;lt;=3;b++) {
    console.log(b)
}
console.log(b)
//正常输出

let b =1
for (var b=1;b&amp;lt;=3;b++) {
    console.log(b)
}
console.log(b)
//会报错，&amp;#39;b&amp;#39; has already been declared

for (var b1 = 1; b1 &amp;lt;= 3; b1++) {
    let b1 = 7;
    console.log(b1)
}
console.log(b1)
//正常输出

for (let b1 =1;b1&amp;lt;=3;b1++) {
    var b1 = 7
    console.log(b1)
}
//会报错，&amp;#39;b&amp;#39; has already been declared&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;综上述，可得出结论：&lt;/strong&gt;&lt;/p&gt;
&lt;font color=&quot;#dd0000&quot;&gt;
1. for（）里面的域可以看作是它外部域的子域，是它后面{}的父域。
2. var可以设置同名变量，因为会自动提升为全局变量，共享内存地址。
3. let同层不可以设置同名变量。
4. var和let变量名相同时，不可以在同一层。
5. var和let变量名相同时，var变量可以在let变量的外层，而let变量不能在var变量的外层。
&lt;/font&gt;
&lt;h1 id=&quot;const&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#const&quot; aria-label=&quot;const permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;const：&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;const&lt;/strong&gt;实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。
对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。
但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const 只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了&lt;/p&gt;
&lt;p&gt;const 为常量时不可修改，声明时必须要初始化。&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;const a =1
a=2 //报错&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;const 为对象或数组时：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;const a = [&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;]
a.push(&amp;quot;3&amp;quot;)
console.log(a)
//可以对数组进行修改

function f() {
    console.log(&amp;quot;1&amp;quot;)
}
const a = f()
function f(){
    console.log(&amp;quot;2&amp;quot;)
}
//这里输出&amp;quot;2&amp;quot;，可以对函数对象修改&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h1 id=&quot;函数作用域&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F&quot; aria-label=&quot;函数作用域 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;函数作用域：&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;ES6 规定，块级作用域之中，函数声明语句的行为类似于 let，在块级作用域之外不可引用：&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;function f() {
    console.log(&amp;quot;f0&amp;quot;);
    function f(){
        console.log(&amp;quot;f01&amp;quot;)
    }
    f()
}
f()
//输出&amp;quot;f0&amp;quot; &amp;quot;f01&amp;quot;

function f() {
    console.log(&amp;quot;f0&amp;quot;);
    function f1(){
        console.log(&amp;quot;f1&amp;quot;)
    }
    f1()
}
f()
f1()//到这里的时候报错，外部不能访问内部函数。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;</content:encoded></item><item><title><![CDATA[从URL到页面显示发生了什么]]></title><description><![CDATA[German inventor Johannes Gutenberg developed a method of movable type and used it to create one of the western world’s first major printed books, the “Forty–Two–Line” Bible.]]></description><link>https://blog.youtingkun.com/posts/What-happens-from-the-URL-to-the-page-display</link><guid isPermaLink="false">https://blog.youtingkun.com/posts/What-happens-from-the-URL-to-the-page-display</guid><pubDate>Thu, 22 Nov 2018 15:49:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;一在浏览器地址栏输入-url&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%B8%80%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5-url&quot; aria-label=&quot;一在浏览器地址栏输入 url permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;一、在浏览器地址栏输入 URL&lt;/h1&gt;
&lt;p&gt;浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果资源未缓存，发起新请求&lt;/li&gt;
&lt;li&gt;如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。&lt;/li&gt;
&lt;li&gt;检验新鲜通常有两个 HTTP 头进行控制 Expires 和 Cache-Control：
&lt;ul&gt;
&lt;li&gt;HTTP1.0 提供 Expires，值为一个绝对时间表示缓存新鲜日期&lt;/li&gt;
&lt;li&gt;HTTP1.1 增加了 Cache-Control: max-age=,值为以秒为单位的最大新鲜时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;二进行-dns-域名解析&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BA%8C%E8%BF%9B%E8%A1%8C-dns-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90&quot; aria-label=&quot;二进行 dns 域名解析 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;二、进行 DNS 域名解析&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;浏览器解析 URL 获取协议，主机，端口，PATH。把这些请求组装一个 HTTP（GET）请求报文:&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;//首行是Request-Line包括：请求方法，请求URI，协议版本，CRLF
//首行之后是若干行请求头，包括general-header，request-header或者entity-header，每个一行以CRLF结束
//请求头和消息实体之间有一个CRLF分隔
//根据实际请求需要可能包含一个消息实体
GET /Protocols/rfc2616/rfc2616-sec5.html HTTP/1.1
Host: www.w3.org
Connection: keep-alive
Cache-Control: max-age=0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36
Referer: https://www.google.com.hk/
Accept-Encoding: gzip,deflate,sdch
Accept-Language: zh-CN,zh;q=0.8,en;q=0.6
Cookie: authorstyle=yes
If-None-Match: &amp;quot;2cc8-3e3073913b100&amp;quot;
If-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT

name=qiu&amp;amp;age=25&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;浏览器获取主机 ip 地址，解析的查找顺序依次为：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.浏览器自身的 DNS 缓存&lt;/p&gt;
&lt;p&gt;2.本机 DNS 缓存 //存放在内存中，关机就消失&lt;/p&gt;
&lt;p&gt;3.hosts 文件 //存放在系统文件夹中&lt;/p&gt;
&lt;p&gt;4.路由器缓存&lt;/p&gt;
&lt;p&gt;5.DNS 域名服务器&lt;/p&gt;
&lt;p&gt;6.根域名服务器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DNS 服务器的分级查询：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主机名.次级域名.顶级域名.根域名 = &lt;a href=&quot;http://www.google.com.root&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;www.google.com.root&lt;/a&gt; //一般 root 会被省略，因为对于所有的域名都是一样的。
全世界有 13 台根服务器，域名为 a.root-servers.net 到 m.root-servers.net。&lt;/p&gt;
&lt;p&gt;所谓”分级查询”，就是从根域名开始，依次查询每一级域名的 NS 记录，直到查到最终的 IP 地址，过程大致如下：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;1.从&amp;quot;根域名服务器&amp;quot;查到&amp;quot;顶级域名服务器&amp;quot;的NS记录和A记录（IP地址）
2.从&amp;quot;顶级域名服务器&amp;quot;查到&amp;quot;次级域名服务器&amp;quot;的NS记录和A记录（IP地址）
3.从&amp;quot;次级域名服务器&amp;quot;查出&amp;quot;主机名&amp;quot;的IP地址
//NS记录（Name Server的缩写），即哪些服务器负责管理google.com的DNS记录。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;根域名服务器分布：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/IW1A84s.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查找方式分为两种：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;迭代和递归。简单来说，迭代查询就是需要本地服务器自己去找，而递归查询是其它其它服务器直接把查询好的结果告诉它。
&lt;img src=&quot;https://i.imgur.com/RVQ3Uxv.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;三根据目标-ip-地址端口建立-tcp-链接&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%B8%89%E6%A0%B9%E6%8D%AE%E7%9B%AE%E6%A0%87-ip-%E5%9C%B0%E5%9D%80%E7%AB%AF%E5%8F%A3%E5%BB%BA%E7%AB%8B-tcp-%E9%93%BE%E6%8E%A5&quot; aria-label=&quot;三根据目标 ip 地址端口建立 tcp 链接 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;三、根据目标 IP 地址，端口建立 TCP 链接&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;进行 TCP 协议三次握手：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.主机向服务器发送一个建立连接的请求（您好，我想认识您）； 2.服务器接到请求后发送同意连接的信号（好的，很高兴认识您）； 3.主机接到同意连接的信号后，再次向服务器发送了确认信号（我也很高兴认识您），自此，主机与服务器两者建立了连接。
//结束断开的时候为四次挥手&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;客户端发送一个TCP的SYN=1，Seq=X的包到服务器端口
服务器发回SYN=1， ACK=X+1， Seq=Y的响应包
客户端发送ACK=Y+1， Seq=Z&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h1 id=&quot;四服务器将响应报文返回-http-报文给浏览器&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%9B%9B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B0%86%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E8%BF%94%E5%9B%9E-http-%E6%8A%A5%E6%96%87%E7%BB%99%E6%B5%8F%E8%A7%88%E5%99%A8&quot; aria-label=&quot;四服务器将响应报文返回 http 报文给浏览器 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;四、服务器将响应报文，返回 HTTP 报文给浏览器&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用 HTTP Host 头部判断请求的服务程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务器检查 HTTP 请求头是否包含缓存验证信息如果验证缓存新鲜，返回 304 等对应状态码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;处理程序读取完整请求并准备 HTTP 响应，可能需要查询数据库等操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务器将响应报文通过 TCP 连接发送回浏览器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;返回的 HTTP 报文如下：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;//首行是Request-Line包括：请求方法，请求URI，协议版本，CRLF
//首行之后是若干行请求头，包括general-header，request-header或者entity-header，每个一行以CRLF结束
//请求头和消息实体之间有一个CRLF分隔
//根据实际请求需要可能包含一个消息实体 一个请求报文例子如下：

GET /Protocols/rfc2616/rfc2616-sec5.html HTTP/1.1
Host: www.w3.org
Connection: keep-alive
Cache-Control: max-age=0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36
Referer: https://www.google.com.hk/
Accept-Encoding: gzip,deflate,sdch
Accept-Language: zh-CN,zh;q=0.8,en;q=0.6
Cookie: authorstyle=yes
If-None-Match: &amp;quot;2cc8-3e3073913b100&amp;quot;
If-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT

&amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
            &amp;lt;!--body goes here--&amp;gt;
      &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h1 id=&quot;五浏览器解析渲染页面&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BA%94%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2&quot; aria-label=&quot;五浏览器解析渲染页面 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;五、浏览器解析渲染页面&lt;/h1&gt;
&lt;p&gt;**浏览器接收 HTTP 响应，然后根据情况选择关闭 TCP 连接或者保留重用，关闭 TCP 连接的四次握手如下： **&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;主动方发送Fin=1， Ack=Z， Seq= X报文
被动方发送ACK=X+1， Seq=Z报文
被动方发送Fin=1， ACK=X， Seq=Y报文
主动方发送ACK=Y， Seq=X报文&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;浏览器检查响应状态吗：是否为 1XX，3XX， 4XX， 5XX，这些情况处理与 2XX 不同&lt;/p&gt;
&lt;p&gt;如果资源可缓存，进行缓存&lt;/p&gt;
&lt;p&gt;对响应进行解码（例如 gzip 压缩）&lt;/p&gt;
&lt;p&gt;根据资源类型决定如何处理（假设资源为 HTML 文档）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解析 HTML 文档，构件 DOM 树，下载资源，构造 CSSOM 树，执行 js 脚本：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;构建 DOM 树：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;Tokenizing：根据HTML规范将字符流解析为标记
Lexing：词法分析将标记转换为对象并定义属性和规则
DOM construction：根据HTML标记关系将对象组成DOM树&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;解析过程中遇到图片、样式表、js 文件，启动下载&lt;/p&gt;
&lt;p&gt;构建 CSSOM 树：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;Tokenizing：字符流转换为标记流
Node：根据标记创建节点
CSSOM：节点创建CSSOM树&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;根据 DOM 树和 CSSOM 树构建渲染树:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;从DOM树的根节点遍历所有可见节点，不可见节点包括：1）script,meta这样本身不可见的标签。2)被css隐藏的节点，如display: none
对每一个可见节点，找到恰当的CSSOM规则并应用
发布可视节点的内容和计算样式&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;js 解析：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时document.readystate为loading
HTML解析器遇到没有async和defer的script时，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容
当解析器遇到设置了async属性的script时，开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载。异步脚本禁止使用document.write()，它们可以访问自己script和之前的文档元素
当文档完成解析，document.readState变成interactive
所有defer脚本会按照在文档出现的顺序执行，延迟脚本能访问完整文档树，禁止使用document.write()
浏览器在Document对象上触发DOMContentLoaded事件
此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，document.readState变为complete,window触发load事件&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;显示页面（HTML 解析过程中会逐步显示页面）&lt;/p&gt;</content:encoded></item><item><title><![CDATA[二叉树相关]]></title><link>https://blog.youtingkun.com/posts/binary-tree</link><guid isPermaLink="false">https://blog.youtingkun.com/posts/binary-tree</guid><pubDate>Wed, 21 Nov 2018 14:49:23 GMT</pubDate><content:encoded>&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;创建
function Node(data,left,right){
	this.data = data;//数值
	this.left = left;//左节点
	this.right = right;//右节点
};&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;--more--&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#--more--&quot; aria-label=&quot;  more   permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;!--more--&gt;&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;插入二叉树
function insert(node,data){
	//创建一个新的节点
	let newNode  = new Node(data,null,null);
	//判断是否存在根节点，没有将新节点存入
	if(node == null){
		node = newNode;
	}else{
		//获取根节点
		let current = node;
		let parent;
		while(true){
			//将当前节点保存为父节点
			parent = current;
			//将小的数据放在左节点
			if(data &amp;lt; current.data){
				//获取当前节点的左节点
				//判断当前节点下的左节点是否有数据
				current = current.left;
				if(current == null){
					//如果没有数据将新节点存入当前节点下的左节点
					parent.left = newNode;
					break;
				}
			}else{
				current = current.right;
				if(current == null){
					parent.right = newNode;
					break;
				}
			}
		}
	}
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;hr&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;翻转二叉树
function invertTree(node) {
	if (node !== null) {
		node.left, node.right = node.left, node.right;
		invertTree(node.left);
		invertTree(node.right);
	}
	return node;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;</content:encoded></item><item><title><![CDATA[css常用布局实现]]></title><link>https://blog.youtingkun.com/posts/Common-CSS-Layouts</link><guid isPermaLink="false">https://blog.youtingkun.com/posts/Common-CSS-Layouts</guid><pubDate>Thu, 01 Nov 2018 15:23:38 GMT</pubDate><content:encoded>&lt;h1 id=&quot;布局方式&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F&quot; aria-label=&quot;布局方式 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;布局方式&lt;/h1&gt;
&lt;p&gt;1.标准文档流&lt;/p&gt;
&lt;p&gt;2.浮动布局&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;其它盒子在定位的时候，会忽略浮动布局定位的元素，但是其它盒子内的文本依然会为这个元素让出位置，环绕在四周。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;3.定位布局
&lt;strong&gt;值为 static 和 relative 时不会脱离文档流。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;值为 absolute 和 fixed 时元素会脱离文档流。&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;绝对定位时，其它盒子在定位时，也会忽略绝对定位的元素，而且其它盒子内的文本也会忽略这个元素。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;!-- more --&gt;
&lt;p&gt;4.flex 布局
&lt;img src=&quot;https://i.imgur.com/LBCOUCx.png&quot; alt=&quot;&quot;&gt;
概念：main axis（主轴）,cross axis（交叉轴）,container(父容器)，item（子容器）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;父容器属性：&lt;/strong&gt;
设置主轴的方向:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;flex-direction:
		row //向右，默认
		column //向下
		row-reverse //向左
		column-reverse //向上&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;设置所有子容器怎样沿主轴排列（横轴）：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;justify-content:
			flex-start //起始端对齐
			flex-end //末尾端对齐
			center //居中对齐
			space-around //子容器沿主轴均匀分布，位于首尾两端的子容器到父容器的距离是子容器间距的一半。
			space-between //子容器沿主轴均匀分布，位于首尾两端的子容器与父容器相切。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;设置所有子容器怎样沿交叉轴排列（纵轴）：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;align-items：
		flex-start //起始端对齐
		flex-end //末尾端对齐
		center //居中对齐
		baseline //基线对齐，这里的 baseline 默认是指首行文字，即 first baseline，所有子容器向基线对齐，交叉轴起点到元素基线距离最大的子容器将会与交叉轴起始端相切以确定基线。
		stretch //子容器沿纵轴方向的尺寸拉伸至与父容器一致。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;设置所有子容器换行方式：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;flex-wrap:
		nowrap //不换行
		wrap //换行
		wrap-reverse //逆序换行&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;轴与换行组合：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;flex-flow:&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;当子容器多行排列时，设置行与行之间的对齐方式。：
align-content:
flex-start
flex-end
center
baseline
stretch&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;子容器属性&lt;/strong&gt;
设置单个子容器在主轴上如何伸缩：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;flex:
	单值（flex-grow或者flex-basis）：1;10em/30px/auto/content/10%
	双值（flex-grow|flex-basis或者flex-shink）:1 30px;1 1
	三值（flex-grow|flex-shink|flex-basis）：1 1 10%&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;设置单个子容器如何沿纵轴排列：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;align-self:
	flex-start
	flex-end
	center
	baseline
	stretch&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;设置在不伸缩的情况下子容器的原始尺寸。主轴为横向时代表宽度，主轴为纵向时代表高度:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;flex-basis:&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;设置子容器弹性伸展的比例,把剩余空间按比列分配给子元素：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;flex-grow:1
flex-grow:2
//前面一个占1后面一个占2&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;设置子容器弹性伸展的比例,超出部分按比列从子容器中减去：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;flex-shrink:1
flex-shrink:2
//前面一个减去超出部分的1，后面一个减去超出部分的2&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;设置排列顺序：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;order:   //默认值为 0，可以为负值，数值越小排列越靠前。&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h1 id=&quot;一水平居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%B8%80%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;一水平居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;一、水平居中&lt;/h1&gt;
&lt;h2 id=&quot;文本行内元素行内块级元素水平居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%96%87%E6%9C%AC%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E8%A1%8C%E5%86%85%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;文本行内元素行内块级元素水平居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;文本/行内元素/行内块级元素水平居中&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    text-align: center;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;单个块级元素水平居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%8D%95%E4%B8%AA%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;单个块级元素水平居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;单个块级元素水平居中&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.son{
    width: 100px; /*必须定宽*/
    margin: 0 auto;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;多个块级元素水平居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%A4%9A%E4%B8%AA%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;多个块级元素水平居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;多个块级元素水平居中&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    text-align: center;
}
.son{
    display: inline-block; /*改为行内或者行内块级形式，以达到text-align对其生效*/
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;利用绝对定位水平居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;利用绝对定位水平居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;利用绝对定位水平居中&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    height: 200px;
    width: 200px;  /*定宽*/
    position: relative;  /*父相*/
    background-color: #f00;
}
.son{
    position: absolute;  /*子绝*/
    left: 50%;  /*父元素宽度一半,这里等同于left:100px*/
    transform: translateX(-50%);  /*自身宽度一半,等同于margin-left: -50px;*/
    width: 100px;  /*定宽*/
    height: 100px;
    background-color: #00ff00;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;任意个元素利用-flex-水平居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BB%BB%E6%84%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E5%88%A9%E7%94%A8-flex-%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;任意个元素利用 flex 水平居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;任意个元素，利用 flex 水平居中&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    display: flex;
    justify-content: center;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h1 id=&quot;二垂直居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BA%8C%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;二垂直居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;二、垂直居中&lt;/h1&gt;
&lt;h2 id=&quot;单行文本行内元素行内块级元素-垂直居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%8D%95%E8%A1%8C%E6%96%87%E6%9C%AC%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E8%A1%8C%E5%86%85%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0-%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;单行文本行内元素行内块级元素 垂直居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;单行文本/行内元素/行内块级元素 垂直居中&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    height: 150px;
    line-height: 150px;  /*与height等值*/
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;多行文本行内元素行内块级元素-垂直居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E8%A1%8C%E5%86%85%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0-%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;多行文本行内元素行内块级元素 垂直居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;多行文本/行内元素/行内块级元素 垂直居中&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{  /*或者用span把所有文字包裹起来，设置display：inline-block转换成图片的方式解决*/
    height: 150px;
    line-height: 30px;  /*元素在页面呈现为5行,则line-height的值为height/5*/
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;图片垂直居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%9B%BE%E7%89%87%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;图片垂直居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;图片垂直居中&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    height: 150px;
    line-height: 150px;
    font-size: 0;
}
.son-img{vertical-align: middle;} /*默认是基线对齐，改为middle*/&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;单个块级元素-垂直居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%8D%95%E4%B8%AA%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0-%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;单个块级元素 垂直居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;单个块级元素 垂直居中&lt;/h2&gt;
&lt;p&gt;使用 table-cell 实现：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    display: table-cell;
    vertical-align: middle;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;使用绝对定位实现:&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到水平居中的目的*/
.parent{
    height: 150px;
    position: relative;  /*父相*/
}
.son{
    position: absolute;  /*子绝*/
    top: 50%;  /*父元素高度一半,这里等同于top:75px;*/
    transform: translateY(-50%);  /*自身高度一半,这里等同于margin-top:-25px;*/
    height: 50px;
}

/*优缺点
优点：使用margin-top兼容性好；不管是块级还是行内元素都可以实现
缺点：代码较多；脱离文档流；使用margin-top需要知道高度值；使用transform兼容性不好（ie9+）*/

或

/*原理：当top、bottom为0时,margin-top&amp;amp;bottom会无限延伸占满空间并且平分*/
.parent{position: relative;}
.son{
    position: absolute;
    margin: auto 0;
    top: 0;
    bottom: 0;
    height: 50px;
}

/*优缺点
优点：简单;兼容性较好(ie8+)
缺点：脱离文档流*/&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;使用 flex 实现：&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    display: flex;
    align-items: center;
}

或

.parent{display: flex;}
.son{align-self: center;}

或
/*原理：这个尚未搞清楚，应该是flex使margin上下边界无限延伸至剩余空间并平分了*/
.parent{display: flex;}
.son{margin: auto 0;}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;任意个元素利用-flex-实现&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BB%BB%E6%84%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E5%88%A9%E7%94%A8-flex-%E5%AE%9E%E7%8E%B0&quot; aria-label=&quot;任意个元素利用 flex 实现 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;任意个元素利用 flex 实现&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    display: flex;
    align-items: center;
}

或
.parent{
    display: flex;
}
.son{
    align-self: center;
}

或
.parent{
    display: flex;
    flex-direction: column;
    justify-content: center;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h1 id=&quot;三水平垂直居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%B8%89%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;三水平垂直居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;三、水平垂直居中&lt;/h1&gt;
&lt;h2 id=&quot;行内行内块级图片-水平垂直居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E8%A1%8C%E5%86%85%E8%A1%8C%E5%86%85%E5%9D%97%E7%BA%A7%E5%9B%BE%E7%89%87-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;行内行内块级图片 水平垂直居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;行内/行内块级/图片 水平垂直居中&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    height: 150px;
    line-height: 150px;  /*行高的值与height相等*/
    text-align: center;
    font-size: 0;   /*消除幽灵空白节点的bug*/
}
.son{
    /*display: inline-block;*/  /*如果是块级元素需改为行内或行内块级才生效*/
    vertical-align: middle;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;利用-table-cell-实现-水平垂直居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8-table-cell-%E5%AE%9E%E7%8E%B0-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;利用 table cell 实现 水平垂直居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;利用 table-cell 实现 水平垂直居中&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    height: 150px;
    width: 200px;
    display: table-cell;
    vertical-align: middle;
    /*text-align: center;*/   /*如果是行内元素就添加这个*/
}
.son{
    /*margin: 0 auto;*/    /*如果是块级元素就添加这个*/
    width: 100px;
    height: 50px;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;利用-button-作为父元素-实现-水平垂直居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8-button-%E4%BD%9C%E4%B8%BA%E7%88%B6%E5%85%83%E7%B4%A0-%E5%AE%9E%E7%8E%B0-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;利用 button 作为父元素 实现 水平垂直居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;利用 button 作为父元素 实现 水平垂直居中&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent-button{  /*改掉button默认样式就好了,不需要居中处理*/
    height: 150px;
    width: 200px;
    outline: none;
    border: none;
}
.son{
    display: inline-block; /*button自带text-align: center,改为行内水平居中生效*/
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;绝对定位水平垂直居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;绝对定位水平垂直居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;绝对定位水平垂直居中&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    position: relative;
}
.son{
    position: absolute;
    top: 50%;
    left: 50%;
    /*定宽高时等同于margin-left:负自身宽度一半;margin-top:负自身高度一半;*/
    transform: translate(-50%,-50%);
}

或
.parent{
    position: relative;
}
.son{
    position: absolute;
    margin: auto;
    width: 100px;
    height: 50px;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;flex-水平垂直居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#flex-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;flex 水平垂直居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;flex 水平垂直居中&lt;/h2&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    display: flex;
}
.son{
    margin: auto;
}

或
.parent{
    display: flex;
    justify-content: center;
    align-items: center;
}

或
.parent{
    display: flex;
    justify-content: center;
}
.son{
    align-self: center;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;视窗水平垂直居中&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E8%A7%86%E7%AA%97%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD&quot; aria-label=&quot;视窗水平垂直居中 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;视窗水平垂直居中&lt;/h2&gt;
&lt;p&gt;原理：vh 为视口单位，视口即文档可视的部分，50vh 就是视口高度的 50/100，设置 50vh 上边距&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.son{
	/*0如果去掉，则会多出滚动条并且上下都是50vh的margin。如果去掉就给body加上overflow:hidden;*/
    margin: 50vh auto 0;
    transform: translateY(-50%);
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h1 id=&quot;四两列布局&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%9B%9B%E4%B8%A4%E5%88%97%E5%B8%83%E5%B1%80&quot; aria-label=&quot;四两列布局 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;四、两列布局&lt;/h1&gt;
&lt;h2 id=&quot;左列定宽右列自适应&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%B7%A6%E5%88%97%E5%AE%9A%E5%AE%BD%E5%8F%B3%E5%88%97%E8%87%AA%E9%80%82%E5%BA%94&quot; aria-label=&quot;左列定宽右列自适应 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;左列定宽，右列自适应&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.利用 float+margin 实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.left {
    background-color: #f00;
    float: left;
    width: 100px;
    height: 500px;
}
.right {
    background-color: #0f0;
    height: 500px;
    margin-left: 100px; /*大于等于#left的宽度*/
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;2.利用 float+overflow 实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.left {
    background-color: #f00;
    float: left;
    width: 100px;
    height: 500px;
}
.right {
    background-color: #0f0;
    height: 500px;
    overflow: hidden; /*触发bfc达到自适应*/
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;3.利用 table 实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    width: 100%;
    display: table;
    height: 500px;
}
.left {
    width: 100px;
    background-color: #f00;
}
.right {
    background-color: #0f0;
}
.left,#right{
    display: table-cell;  /*利用单元格自动分配宽度*/
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;4.利用绝对定位实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
  	position:relative;
}
.left {
  	position:absolute;
    background-color: #f00;
    width: 100px;
    height: 500px;
}
.right {
	position:absolute;
	left:100px;
	right:0px;
    background-color: #0f0;
    height: 500px;

}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;5.利用 flex 实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
  display:flex;
}
.left {
    background-color: #f00;
    width: 100px;
    height: 500px;
}
.right {
    flex:1;
    background-color: #0f0;
    height: 500px;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;6.利用 grid（网格）实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    display:grid;
    grid-template-columns:100px auto;
}
.left {
    background-color: #f00;

}
.right {
    background-color: #0f0;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;左列自适应右列定宽&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%B7%A6%E5%88%97%E8%87%AA%E9%80%82%E5%BA%94%E5%8F%B3%E5%88%97%E5%AE%9A%E5%AE%BD&quot; aria-label=&quot;左列自适应右列定宽 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;左列自适应，右列定宽&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.利用 float+margin 实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    padding-left:100px;//为了抵消margin-left:-100px
}
.left {
    width:100%;
    float:left;
    margin-left:-100px;
    background-color: #f00;

}
.right {
    width:100px;
    float:right;
    background-color: #0f0;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;2.利用 float+overflow 实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;//这里左右列的标签要换一下
&amp;lt;body&amp;gt;
  &amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;right&amp;quot;&amp;gt;右列定宽&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;left&amp;quot;&amp;gt;左列自适应&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

.left {
    overflow: hidden;  /*触发bfc*/
    background-color: #f00;
}
.right {
    float: right;
    width: 100px;
    background-color: #0f0;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;3.利用 table 实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    display:table;
    width:100%;
}
.left {
    display:table-cell;
    background-color: #ff0;
}
.right {
    display:table-cell;
    width: 100px;
    background-color: #0f0;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;4.利用绝对定位实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    position:relative;

}
.left {
    position:absolute;
    right:100px;
    left:0px;
    background-color: #ff0;
}
.right {
    position:absolute;
    right:0px;
    width: 100px;
    background-color: #0f0;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;5.利用 flex 实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    display:flex;

}
.left {
    flex:1;
    background-color: #f00;
}
.right {
    width: 100px;
    background-color: #0f0;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;6.利用 grid 实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
    display:grid;
    grid-template-columns:auto 100px;
}
.left {
    background-color: #ff0;
}
.right {
    background-color: #0f0;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;左列不定宽右列自适应&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%B7%A6%E5%88%97%E4%B8%8D%E5%AE%9A%E5%AE%BD%E5%8F%B3%E5%88%97%E8%87%AA%E9%80%82%E5%BA%94&quot; aria-label=&quot;左列不定宽右列自适应 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;左列不定宽，右列自适应&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.利用 float+overflow 实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.left {
    float:left;
    background-color: #f00;
}
.right {
    overflow:hidden;
    background-color: #0f0;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;2.利用 flex 实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
   display:flex;
}
.left {
    background-color: #ff0;
}
.right {
    flex:1;
    background-color: #0f0;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;3.利用 grid 实现&lt;/strong&gt;&lt;/p&gt;
&lt;deckgo-highlight-code   &gt;
          &lt;code slot=&quot;code&quot;&gt;.parent{
   display:grid;
   grid-template-columns:auto 1fr;
}

.left {

    background-color: #f00;
}
.right {
    flex:1;
    background-color: #0f0;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;</content:encoded></item></channel></rss>