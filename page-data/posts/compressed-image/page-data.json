{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/compressed-image","result":{"data":{"markdownRemark":{"id":"7bc1c21f-9e9f-59a9-8c8a-e855ee4e98a2","html":"<p>前端通过 canvas 来实现上传时的图片压缩</p>\n<deckgo-highlight-code language=\"js\"  >\n          <code slot=\"code\">async function imgCompress(imgFile, quality, maxSize) {\n  return new Promise(async (resolve, reject) =&gt; {\n    if (imgFile.size &lt; maxSize * 1024 * 1024) {\n      resolve(imgFile);\n      return;\n    }\n    console.log(&quot;压缩前的大小：&quot;, imgFile.size);\n    const type = imgFile.type;\n    const dataURL = await file2DataURL(imgFile);\n    const img = await dataURL2Image(dataURL);\n    const compressedDataURL = await canvasCompress(img, quality, type);\n    const compressedResult = await dataURL2Blob(compressedDataURL, type);\n    compressedResult.fileName = imgFile.name;\n    console.log(&quot;压缩后的大小：&quot;, compressedResult.size);\n    resolve(compressedResult);\n  });\n}\n\nfunction file2DataURL(file) {\n  return new Promise((resolve, reject) =&gt; {\n    const reader = new FileReader();\n    reader.onload = function() {\n      const dataURL = this.result;\n      resolve(dataURL);\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction dataURL2Image(dataURL, callback) {\n  return new Promise((resolve, reject) =&gt; {\n    const img = new Image();\n    img.onload = () =&gt; {\n      resolve(img);\n    };\n    img.src = dataURL;\n  });\n}\n\nfunction canvasCompress(img, quality, type) {\n  return new Promise((resolve, reject) =&gt; {\n    const canvas = document.createElement(&quot;canvas&quot;);\n    const { width, height } = img;\n    canvas.width = width;\n    canvas.height = height;\n    const context = canvas.getContext(&quot;2d&quot;);\n    context.drawImage(img, 0, 0, width, height);\n    const compressedDataURL = canvas.toDataURL(type, quality);\n    resolve(compressedDataURL);\n  });\n}\n\nfunction dataURL2Blob(dataURL, type) {\n  return new Promise((resolve, reject) =&gt; {\n    const text = window.atob(dataURL.split(&quot;,&quot;)[1]);\n    const buffer = new ArrayBuffer(text.length);\n    const ubuffer = new Uint8Array(buffer);\n    for (let i = 0; i &lt; text.length; i++) {\n      ubuffer[i] = text.charCodeAt(i);\n    }\n    const blob = new window.Blob([buffer], { type });\n    resolve(blob);\n  });\n}\n\nexport default imgCompress;</code>\n        </deckgo-highlight-code>","fields":{"slug":"/posts/compressed-image","tagSlugs":["/tag/javascript/"]},"frontmatter":{"date":"2020-06-27 18:57:54","description":"","tags":["javascript"],"title":"前端压缩图片"}},"previous":{"fields":{"slug":"/posts/Custom-authentication"},"frontmatter":{"title":"在表格的自定义列里面实现自定义验证"}},"next":null},"pageContext":{"slug":"/posts/compressed-image","previousPostSlug":"/posts/Custom-authentication","nextPostSlug":null}},"staticQueryHashes":["2281626716","251939775","401334301"]}